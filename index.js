

// Экранирование буквенных кавычек в строках

// Чтобы добавить кавычки в js код и они отобразились, т.е написать буквальную цитату. Нужно перед ними добавить косую черту /" 

const myStr = "I am a \"double quoted\" string inside \"double quotes\".";
console.log(myStr); // => I am a "double quoted" string inside "double quotes".
const myStr = '<a href="http://www.example.com" target="_blank">Link</a>'; // двойные кавычки внутри одинарных

/* 
Специальные символы для того чтобы js вывел их на экран
Код	Выход
\'	одинарная кавычка
\"	двойная кавычка
\\	обратная косая черта
\n	новая линия
\r	возврат каретки
\t	вкладка
\b	граница слова
\f	подача формы
*/

// Конкатенация +

const ourStr = "I come first. " + "I come second."; // => I come first. I come second 

// также в конкатенации можно использовать оператор +=

let ourStr = "I come first. ";
ourStr += "I come second."; // => I come first. I come second 

// Также можно вставлять переменные в строку с помощью +

const ourName = "freeCodeCamp";
const ourStr = "Hello, our name is " + ourName + ", how are you?";

const anAdjective = "awesome!";
let ourStr = "freeCodeCamp is ";
ourStr += anAdjective; // или вот так, ourStrбудет иметь значение freeCodeCamp is awesome!.

// длина строки 
//Вы можете найти длину Stringзначения, написав .length после строковой переменной или строкового литерала.

console.log("Alan Peter".length); //=> 10

/* В JavaScript Stringзначения являются неизменяемыми , что означает, что их нельзя изменить после создания.

Например, следующий код:

let myStr = "Bob";
myStr[0] = "J";
не может изменить значение myStrна Job, потому что содержимое myStrне может быть изменено. Обратите внимание, что это не означает, что myStrего нельзя изменить, просто нельзя изменить отдельные символы строкового литерала . Единственный способ изменить myStrэто — присвоить ему новую строку, например:

let myStr = "Bob";
myStr = "Job";
Исправьте присваивание, myStrчтобы оно содержало строковое значение, Hello Worldиспользуя подход, показанный в приведенном выше примере.
*/

//!-----------------------------------------------------------------------------------------------------------------------------------------------



// МАССИВЫ

const sandwich = ["peanut butter", "jelly", "bread"];

// Вы также можете вкладывать массивы в другие массивы, как показано ниже:
// Это также называется многомерным массивом .



const teams = [["Bulls", 23], ["White Sox", 45]];

//?Мы можем получить доступ к данным внутри массивов, используя индексы .
//?Индексы массива записываются в той же скобочной нотации, что и строки,за исключением того,
//?что вместо указания символа они указывают запись в массиве. Как и строки, массивы используют индексацию с отсчетом от нуля , поэтому первый элемент в массиве имеет индекс 0.

const array = [50, 60, 70];
console.log(array[0]);
const data = array[1]; // => 50

//! В отличие от строк, элементы массивов изменяемы и могут свободно изменяться, даже если массив был объявлен с расширением const.

//Пример:

const ourArray = [50, 40, 30];
ourArray[0] = 15;

//? ourArrayтеперь имеет значение [15, 40, 30].

/*
Один из способов представить многомерный массив — это массив массивов.
Когда вы используете скобки для доступа к вашему массиву, первый набор скобок относится к записям в самом внешнем (первом уровне) массиве,
а каждая дополнительная пара скобок относится к следующему уровню записей внутри.

Пример */

const arr = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [[10, 11, 12], 13, 14]
];

/*
arr[3];
arr[3][0];
arr[3][0][1];
arr[3]есть [[10, 11, 12], 13, 14], arr[3][0]есть [10, 11, 12]и arr[3][0][1]есть 11.
*/


//!Простой способ добавления данных в конец массива — через push()функцию.

/*
.push()принимает один или несколько параметров и "помещает" их в конец массива.

Примеры:
*/

const arr1 = [1, 2, 3];
arr1.push(4);

const arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);

//? arr1 теперь имеет значение [1, 2, 3, 4]и arr2 имеет значение ["Stimpson", "J", "cat", ["happy", "joy"]].

//! Другой способ изменить данные в массиве — использовать .pop()функцию.

/* .pop()используется для извлечения значения из конца массива. Мы можем сохранить это всплывающее значение, назначив его переменной. Другими словами, .pop()удаляет последний элемент из массива и возвращает этот элемент.

Любой тип записи может быть извлечен из массива — числа, строки и даже вложенные массивы.
*/

const threeArr = [1, 4, 6];
const oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);

//? Первый console.log отобразит значение 6, а второй отобразит значение [1, 4].

//! метод .shift() работает как и .pop(), но удаляет первый элемент массива, а не последний.

сonst ourArray = ["Stimpson", "J", ["cat"]];
const removedFromOurArray = ourArray.shift();

//? emovedFromOurArrayбудет иметь значение строки Stimpson, и ourArrayбудет иметь ["J", ["cat"]].





